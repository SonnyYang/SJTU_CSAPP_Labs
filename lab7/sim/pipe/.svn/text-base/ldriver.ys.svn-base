#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $63, %eax		# src and dst have 63 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
StartFun:
#Name: Ma Yichun
#ID  : 5130379009

#Changes in this file:
#1.expand the loop like chapter 5.8 in our book
#  By decreasing the time of "jmp", we can avoid some mis-predict hazard
#  (expand 16 times in this version)
#  first: use 0xfffffff0 to andl len, deal with loop bigger than 16
#  second: use jump table to deal with the rest 15 elements
#  (To make a jump table, first use addl to make a len*5, then add the address of jmpTable, then push it and ret)






#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	irmovl $0xfffffff0, %edi
	andl %edx, %edi
	je Rest

Loop1:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Loop2		# if so, goto Loopi2:
	iaddl $1, %eax		# count++
Loop2:
	mrmovl 4(%ebx), %esi
	rmmovl %esi, 4(%ecx)
	andl %esi, %esi
	jle Loop3
	iaddl $1, %eax
Loop3:
	mrmovl 8(%ebx), %esi
	rmmovl %esi, 8(%ecx)
	andl %esi, %esi
	jle Loop4
	iaddl $1, %eax
Loop4:
	mrmovl 12(%ebx), %esi
	rmmovl %esi, 12(%ecx)
	andl %esi, %esi
	jle Loop5
	iaddl $1, %eax
Loop5:
	mrmovl 16(%ebx), %esi
	rmmovl %esi, 16(%ecx)
	andl %esi, %esi
	jle Loop6
	iaddl $1, %eax
Loop6:
	mrmovl 20(%ebx), %esi
	rmmovl %esi, 20(%ecx)
	andl %esi, %esi
	jle Loop7
	iaddl $1, %eax
Loop7:
	mrmovl 24(%ebx), %esi
	rmmovl %esi, 24(%ecx)
	andl %esi, %esi
	jle Loop8
	iaddl $1, %eax
Loop8:
	mrmovl 28(%ebx), %esi
	rmmovl %esi, 28(%ecx)
	andl %esi, %esi
	jle Loop9
	iaddl $1, %eax
Loop9:
	mrmovl 32(%ebx), %esi
	rmmovl %esi, 32(%ecx)
	andl %esi, %esi
	jle Loop10
	iaddl $1, %eax
Loop10:
	mrmovl 36(%ebx), %esi
	rmmovl %esi, 36(%ecx)
	andl %esi, %esi
	jle Loop11
	iaddl $1, %eax
Loop11:
	mrmovl 40(%ebx), %esi
	rmmovl %esi, 40(%ecx)
	andl %esi, %esi
	jle Loop12
	iaddl $1, %eax
Loop12:
	mrmovl 44(%ebx), %esi
	rmmovl %esi, 44(%ecx)
	andl %esi, %esi
	jle Loop13
	iaddl $1, %eax
Loop13:
	mrmovl 48(%ebx), %esi
	rmmovl %esi, 48(%ecx)
	andl %esi, %esi
	jle Loop14
	iaddl $1, %eax
Loop14:
	mrmovl 52(%ebx), %esi
	rmmovl %esi, 52(%ecx)
	andl %esi, %esi
	jle Loop15
	iaddl $1, %eax
Loop15:
	mrmovl 56(%ebx), %esi
	rmmovl %esi, 56(%ecx)
	andl %esi, %esi
	jle Loop16
	iaddl $1, %eax
Loop16:
	mrmovl 60(%ebx), %esi
	rmmovl %esi, 60(%ecx)
	andl %esi, %esi
	jle LoopEnd
	iaddl $1, %eax
LoopEnd:
	iaddl $64, %ebx
	iaddl $64, %ecx
	iaddl $-16, %edx
	iaddl $-16, %edi
	jne Loop1

Rest:
	addl %edx, %edx
	addl %edx, %edx
	addl %edx, %edx
	iaddl jmpTable, %edx
	pushl %edx
	ret

jmpTable:
	jmp Done
	nop
	nop
	nop
	jmp rLoop1
	nop
	nop
	nop
	jmp rLoop2
	nop
	nop
	nop
	jmp rLoop3
	nop
	nop
	nop
	jmp rLoop4
	nop
	nop
	nop
	jmp rLoop5
	nop
	nop
	nop
	jmp rLoop6
	nop
	nop
	nop
	jmp rLoop7
	nop
	nop
	nop
	jmp rLoop8
	nop
	nop
	nop
	jmp rLoop9
	nop
	nop
	nop
	jmp rLoop10
	nop
	nop
	nop
	jmp rLoop11
	nop
	nop
	nop
	jmp rLoop12
	nop
	nop
	nop
	jmp rLoop13
	nop
	nop
	nop
	jmp rLoop14
	nop
	nop
	nop
	jmp rLoop15

rLoop15:
	mrmovl 56(%ebx), %esi
	rmmovl %esi, 56(%ecx)
	andl %esi, %esi
	jle rLoop14
	iaddl $1, %eax
rLoop14:
	mrmovl 52(%ebx), %esi
	rmmovl %esi, 52(%ecx)
	andl %esi, %esi
	jle rLoop13
	iaddl $1, %eax
rLoop13:
	mrmovl 48(%ebx), %esi
	rmmovl %esi, 48(%ecx)
	andl %esi, %esi
	jle rLoop12
	iaddl $1, %eax
rLoop12:
	mrmovl 44(%ebx), %esi
	rmmovl %esi, 44(%ecx)
	andl %esi, %esi
	jle rLoop11
	iaddl $1, %eax
rLoop11:
	mrmovl 40(%ebx), %esi
	rmmovl %esi, 40(%ecx)
	andl %esi, %esi
	jle rLoop10
	iaddl $1, %eax
rLoop10:
	mrmovl 36(%ebx), %esi
	rmmovl %esi, 36(%ecx)
	andl %esi, %esi
	jle rLoop9
	iaddl $1, %eax
rLoop9:
	mrmovl 32(%ebx), %esi
	rmmovl %esi, 32(%ecx)
	andl %esi, %esi
	jle rLoop8
	iaddl $1, %eax
rLoop8:
	mrmovl 28(%ebx), %esi
	rmmovl %esi, 28(%ecx)
	andl %esi, %esi
	jle rLoop7
	iaddl $1, %eax
rLoop7:
	mrmovl 24(%ebx), %esi
	rmmovl %esi, 24(%ecx)
	andl %esi, %esi
	jle rLoop6
	iaddl $1, %eax
rLoop6:
	mrmovl 20(%ebx), %esi
	rmmovl %esi, 20(%ecx)
	andl %esi, %esi
	jle rLoop5
	iaddl $1, %eax
rLoop5:
	mrmovl 16(%ebx), %esi
	rmmovl %esi, 16(%ecx)
	andl %esi, %esi
	jle rLoop4
	iaddl $1, %eax
rLoop4:
	mrmovl 12(%ebx), %esi
	rmmovl %esi, 12(%ecx)
	andl %esi, %esi
	jle rLoop3
	iaddl $1, %eax
rLoop3:
	mrmovl 8(%ebx), %esi
	rmmovl %esi, 8(%ecx)
	andl %esi, %esi
	jle rLoop2
	iaddl $1, %eax
rLoop2:
	mrmovl 4(%ebx), %esi
	rmmovl %esi, 4(%ecx)
	andl %esi, %esi
	jle rLoop1
	iaddl $1, %eax
rLoop1:
	mrmovl (%ebx), %esi
	rmmovl %esi, (%ecx)
	andl %esi, %esi
	jle Done
	iaddl $1, %eax


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long -1
	.long -2
	.long -3
	.long 4
	.long 5
	.long -6
	.long 7
	.long -8
	.long -9
	.long -10
	.long -11
	.long -12
	.long -13
	.long 14
	.long -15
	.long 16
	.long 17
	.long -18
	.long -19
	.long 20
	.long -21
	.long -22
	.long -23
	.long -24
	.long -25
	.long -26
	.long 27
	.long 28
	.long 29
	.long 30
	.long 31
	.long -32
	.long -33
	.long 34
	.long 35
	.long -36
	.long 37
	.long 38
	.long -39
	.long 40
	.long 41
	.long -42
	.long 43
	.long 44
	.long -45
	.long -46
	.long -47
	.long -48
	.long 49
	.long 50
	.long 51
	.long 52
	.long -53
	.long 54
	.long -55
	.long -56
	.long -57
	.long 58
	.long 59
	.long 60
	.long 61
	.long 62
	.long 63
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
